syntax = "proto3";

package team.v1;

import "google/protobuf/timestamp.proto";
import "organization/v1/organization.proto";

// Team service for managing teams
service TeamService {
  // Create a new team
  rpc CreateTeam(CreateTeamRequest) returns (CreateTeamResponse);
  
  // Get team details
  rpc GetTeam(GetTeamRequest) returns (GetTeamResponse);
  
  // List teams with members
  rpc ListTeams(ListTeamsRequest) returns (ListTeamsResponse);
  
  // Update team
  rpc UpdateTeam(UpdateTeamRequest) returns (UpdateTeamResponse);
  
  // Delete team
  rpc DeleteTeam(DeleteTeamRequest) returns (DeleteTeamResponse);
}

// Simple enums
enum TeamType {
  TEAM_TYPE_UNSPECIFIED = 0;
  TEAM_TYPE_DEVELOPMENT = 1;
  TEAM_TYPE_OPERATIONS = 2;
  TEAM_TYPE_DEVOPS = 3;
  TEAM_TYPE_MARKETING = 4;
  TEAM_TYPE_SALES = 5;
  TEAM_TYPE_SUPPORT = 6;
}

enum MemberRole {
  MEMBER_ROLE_UNSPECIFIED = 0;
  MEMBER_ROLE_OWNER = 1;
  MEMBER_ROLE_ADMIN = 2;
  MEMBER_ROLE_MEMBER = 3;
}

// Team message with organization name and members
message Team {
  string id = 1;
  string name = 2;
  string description = 3;
  
  // Organization relationship
  string organization_id = 4;
  string organization_name = 5;  // Display name of the organization
  
  TeamType type = 6;
  
  // Members included in listing
  repeated TeamMember members = 7;
  int32 member_count = 8;
  
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

// Simple team member
message TeamMember {
  string id = 1;
  string name = 2;
  string email = 3;
  MemberRole role = 4;
  google.protobuf.Timestamp joined_at = 5;
}

// Create team - user selects from org list
message CreateTeamRequest {
  string organization_id = 1;  // Selected from organization list
  string name = 2;
  string description = 3;
  TeamType type = 4;
}

message CreateTeamResponse {
  Team team = 1;
}

// Get team
message GetTeamRequest {
  string id = 1;
}

message GetTeamResponse {
  Team team = 1;
}

// List teams with members
message ListTeamsRequest {
  optional string organization_id = 1;  // Filter by organization
  optional int32 page_size = 2;
  optional string page_token = 3;
}

message ListTeamsResponse {
  repeated Team teams = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// Update team
message UpdateTeamRequest {
  string id = 1;
  optional string name = 2;
  optional string description = 3;
  optional TeamType type = 4;
}

message UpdateTeamResponse {
  Team team = 1;
}

// Delete team
message DeleteTeamRequest {
  string id = 1;
}

message DeleteTeamResponse {
  bool success = 1;
}